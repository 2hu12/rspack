name: Reusable Release

# Example job:
# jobs:
#   build:
#     name: Release
#     strategy:
#       matrix:
#         target:
#           - x86_64-unknown-linux-gnu
#           - aarch64-unknown-linux-gnu
#           - x86_64-unknown-linux-musl
#           - aarch64-unknown-linux-musl
#           - i686-pc-windows-msvc
#           - x86_64-pc-windows-msvc
#           - aarch64-pc-windows-msvc
#           - x86_64-apple-darwin
#           - aarch64-apple-darwin
#     uses: ./.github/workflows/reusable-build.yml
#     with:
#       target: ${{ matrix.target }}
#       docker: true

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      docker:
        required: true
        type: boolean
      tests:
        description: "Run tests?"
        default: false
        required: false
        type: boolean

jobs:
  select:
    name: Select Host
    runs-on: ubuntu-latest
    outputs:
      host: ${{ steps.run.outputs.host }}
      docker: ${{ steps.run.outputs.docker }}
    steps:
      - name: Choose Target for ${{ inputs.target }}
        id: run
        shell: bash
        run: |
          if [[ "${{ contains(inputs.target, 'linux') }}" == "true" ]]; then
            echo "host=ubuntu-latest" >> "$GITHUB_OUTPUT"
            if [[ "${{ inputs.docker }}" == "true" ]]; then
              echo "docker=true" >> "$GITHUB_OUTPUT"
            fi
          fi
          if [[ "${{ contains(inputs.target, 'windows') }}" == "true" ]]; then
            echo "host=windows-latest" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ contains(inputs.target, 'apple') }}" == "true" ]]; then
            echo "host=macos-latest" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build
    needs: select
    runs-on: ${{ needs.select.outputs.host }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-${{ inputs.target }}
          save-if: ${{ github.ref_name == 'main' }} # This should be safe because we have nightly building the cache every day

      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache

      - name: Install cross
        uses: taiki-e/install-action@cross

      - name: Add Rust Target
        run: rustup target add ${{ inputs.target }}

      - name: Find and Replace on MacOS
        if: runner.os == 'macOs'
        run: sed -i '' "s/'cargo'/'cross'/g" ./node_modules/@napi-rs/cli/dist/api/build.js

      - name: Find and Replace on non-MacOS
        if: runner.os != 'macOs'
        run: sed -i "s/'cargo'/'cross'/g" ./node_modules/@napi-rs/cli/dist/api/build.js

      - name: Build
        run: |
          cd crates/node_binding
          RUST_TARGET=${{ inputs.target }} pnpm run build:release

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/*.node
          if-no-files-found: error

  test:
    needs: [select, build]
    if: inputs.tests
    runs-on: ${{ needs.select.outputs.host }}
    # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
    timeout-minutes: 15
    strategy:
      fail-fast: false # Build and test everything so we can look at all the errors
      matrix:
        node: [14, 16]
    name: Test Node ${{ matrix.node }}
    steps:
      - uses: actions/checkout@v3

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Show restored binding
        shell: bash
        run: ls -lah crates/node_binding/*.node

      ### x86_64-unknown-linux-gnu

      - name: Test x86_64-unknown-linux-gnu
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-test
        with:
          node: ${{ matrix.node }}

      ### aarch64-unknown-linux-gnu

      - name: Set up QEMU aarch64-unknown-linux-gnu
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up qemu-user-static aarch64-unknown-linux-gnu
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-gnu' }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Test aarch64-unknown-linux-gnu
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-test
        with:
          node: ${{ matrix.node }}
          options: --platform linux/arm64

      ### x86_64-unknown-linux-musl

      - name: Test x86_64-unknown-linux-musl
        if: ${{ false && inputs.target == 'x86_64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-test
        with:
          node: ${{ matrix.node }}
          image: alpine

      ### aarch64-unknown-linux-musl

      - name: Set up QEMU aarch64-unknown-linux-musl
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-musl' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
          image: alpine

      - name: Set up qemu-user-static aarch64-unknown-linux-musl
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-musl' }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Test aarch64-unknown-linux-musl
        if: ${{ false && inputs.target == 'aarch64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-test
        with:
          node: ${{ matrix.node }}
          options: --platform linux/arm64

      ### x86_64-apple-darwin

      - name: Setup x86_64-apple-darwin
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: ${{ matrix.node }}

      - name: Test x86_64-apple-darwin
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
          PUPPETEER_SKIP_DOWNLOAD: true
        shell: bash
        run: |
          set -e
          corepack enable
          pnpm install
          pnpm run build:js
          pnpm run test:unit
          pnpm run test:example
          # pnpm run test:e2e

      ### x86_64-pc-windows-msvc

      - name: Setup x86_64-pc-windows-msvc
        if: ${{ false && inputs.target == 'x86_64-pc-windows-msvc' }}
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: ${{ matrix.node }}

      - name: Test x86_64-pc-windows-msvc
        if: ${{ false && inputs.target == 'x86_64-pc-windows-msvc' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
          PUPPETEER_SKIP_DOWNLOAD: true
        shell: bash
        run: |
          set -e
          corepack enable
          pnpm install
          pnpm run build:js
          pnpm run test:unit
          pnpm run test:example
          # pnpm run test:e2e
